/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.hyperledger.besu.secp256r1.demo;

import org.hyperledger.besu.secp256r1.demo.Web3jNist.NistTransactionManager;
import org.hyperledger.besu.secp256r1.demo.contract.DemoErc20;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.protocol.http.HttpService;
import org.web3j.tx.gas.DefaultGasProvider;

import java.math.BigInteger;

public class App {
    public static void main(String[] args) throws Exception {
        Credentials owner = Credentials.create(
                "9588ef2ee32964c5ed39b9ff5e0a8abeb61901e658f301c4699a7810205051ee",
                "eaffc9af968bb33e1d69e5a7ba1028d5d31c316343d8c8427d215c19c37004df8f1f849381232a699de9750800b10c8efb2bc49ed6591c40d3cae0f842c36e69");

        System.out.println("Owner address: " + owner.getAddress());

        String userA = "8F318A705f08b81A5D3C9C856F584edE061c06dA";
        System.out.println("UserA address: 0x" + userA);
        String userB = "1b54F0707a12ec6c8a17CdFb2C9c69bBB6Fe98b9";
        System.out.println("UserA address: 0x" + userB);

        Web3j web3j = Web3j.build(new HttpService("http://127.0.0.1:8545"));
        NistTransactionManager transactionManagerOwner = new NistTransactionManager(web3j, owner , 2018);

        System.out.println("Deploying ERC20 contract...");
        DemoErc20 tokenOwner = DemoErc20.deploy(web3j, transactionManagerOwner, new DefaultGasProvider()).send();

        System.out.println("Contract deployed at " +  tokenOwner.getContractAddress());
        System.out.println("Contract deployed tx id " +  tokenOwner.getTransactionReceipt().get().getTransactionHash());
        System.out.println("Owner has 10.000 tokens");

        BigInteger decimals = tokenOwner.decimals().send();
        BigInteger multiplier = BigInteger.valueOf(10).pow(decimals.intValue());

        System.out.println("Sending 1.000 tokens to userA");
        BigInteger transferAmountUserA = BigInteger.valueOf(1000).multiply(multiplier);
        TransactionReceipt receiptTransferUserA = tokenOwner.transfer(userA, transferAmountUserA).send();
        System.out.println("Transfer successful: " + receiptTransferUserA.getTransactionHash());

        System.out.println("Sending 500 tokens to userB");
        BigInteger transferAmountUserB = BigInteger.valueOf(500).multiply(multiplier);
        TransactionReceipt receiptTransferUserB = tokenOwner.transfer(userB, transferAmountUserB).send();
        System.out.println("Transfer successful: " + receiptTransferUserB.getTransactionHash());
    }
}
